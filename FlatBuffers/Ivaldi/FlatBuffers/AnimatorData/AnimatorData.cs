// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ivaldi.FlatBuffers.AnimatorData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AnimatorData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AnimatorData GetRootAsAnimatorData(ByteBuffer _bb) { return GetRootAsAnimatorData(_bb, new AnimatorData()); }
  public static AnimatorData GetRootAsAnimatorData(ByteBuffer _bb, AnimatorData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimatorData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string DefaultStateName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefaultStateNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDefaultStateNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDefaultStateNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public Ivaldi.FlatBuffers.AnimatorData.AniStateData? DataList(int j) { int o = __p.__offset(8); return o != 0 ? (Ivaldi.FlatBuffers.AnimatorData.AniStateData?)(new Ivaldi.FlatBuffers.AnimatorData.AniStateData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Ivaldi.FlatBuffers.AnimatorData.AnimatorData> CreateAnimatorData(FlatBufferBuilder builder,
      StringOffset DefaultStateNameOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      VectorOffset DataListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    AnimatorData.AddDataList(builder, DataListOffset);
    AnimatorData.AddName(builder, NameOffset);
    AnimatorData.AddDefaultStateName(builder, DefaultStateNameOffset);
    return AnimatorData.EndAnimatorData(builder);
  }

  public static void StartAnimatorData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddDefaultStateName(FlatBufferBuilder builder, StringOffset defaultStateNameOffset) { builder.AddOffset(0, defaultStateNameOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDataList(FlatBufferBuilder builder, VectorOffset dataListOffset) { builder.AddOffset(2, dataListOffset.Value, 0); }
  public static VectorOffset CreateDataListVector(FlatBufferBuilder builder, Offset<Ivaldi.FlatBuffers.AnimatorData.AniStateData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataListVectorBlock(FlatBufferBuilder builder, Offset<Ivaldi.FlatBuffers.AnimatorData.AniStateData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Ivaldi.FlatBuffers.AnimatorData.AniStateData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Ivaldi.FlatBuffers.AnimatorData.AniStateData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Ivaldi.FlatBuffers.AnimatorData.AnimatorData> EndAnimatorData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ivaldi.FlatBuffers.AnimatorData.AnimatorData>(o);
  }
}


static public class AnimatorDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*DefaultStateName*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*DataList*/, Ivaldi.FlatBuffers.AnimatorData.AniStateDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}

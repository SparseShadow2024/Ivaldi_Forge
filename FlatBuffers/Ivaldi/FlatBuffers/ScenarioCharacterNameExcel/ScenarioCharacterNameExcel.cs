// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ivaldi.FlatBuffers.ScenarioCharacterNameExcel
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScenarioCharacterNameExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScenarioCharacterNameExcel GetRootAsScenarioCharacterNameExcel(ByteBuffer _bb) { return GetRootAsScenarioCharacterNameExcel(_bb, new ScenarioCharacterNameExcel()); }
  public static ScenarioCharacterNameExcel GetRootAsScenarioCharacterNameExcel(ByteBuffer _bb, ScenarioCharacterNameExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioCharacterNameExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint CharacterName { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Ivaldi.FlatBuffers.Common.ProductionStep ProductionStep { get { int o = __p.__offset(6); return o != 0 ? (Ivaldi.FlatBuffers.Common.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : Ivaldi.FlatBuffers.Common.ProductionStep.ToDo; } }
  public string NameKR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameKRBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameKRBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameKRArray() { return __p.__vector_as_array<byte>(8); }
  public string NicknameKR { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameKRBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNicknameKRBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNicknameKRArray() { return __p.__vector_as_array<byte>(10); }
  public string NameJP { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameJPBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameJPBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameJPArray() { return __p.__vector_as_array<byte>(12); }
  public string NicknameJP { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameJPBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNicknameJPBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNicknameJPArray() { return __p.__vector_as_array<byte>(14); }
  public Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterShapes Shape { get { int o = __p.__offset(16); return o != 0 ? (Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterShapes)__p.bb.GetInt(o + __p.bb_pos) : Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterShapes.None; } }
  public string SpinePrefabName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpinePrefabNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetSpinePrefabNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetSpinePrefabNameArray() { return __p.__vector_as_array<byte>(18); }
  public string SmallPortrait { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallPortraitBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSmallPortraitBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSmallPortraitArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterNameExcel> CreateScenarioCharacterNameExcel(FlatBufferBuilder builder,
      uint characterName = 0,
      Ivaldi.FlatBuffers.Common.ProductionStep productionStep = Ivaldi.FlatBuffers.Common.ProductionStep.ToDo,
      StringOffset nameKROffset = default(StringOffset),
      StringOffset nicknameKROffset = default(StringOffset),
      StringOffset nameJPOffset = default(StringOffset),
      StringOffset nicknameJPOffset = default(StringOffset),
      Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterShapes shape = Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterShapes.None,
      StringOffset spinePrefabNameOffset = default(StringOffset),
      StringOffset smallPortraitOffset = default(StringOffset)) {
    builder.StartTable(9);
    ScenarioCharacterNameExcel.AddSmallPortrait(builder, smallPortraitOffset);
    ScenarioCharacterNameExcel.AddSpinePrefabName(builder, spinePrefabNameOffset);
    ScenarioCharacterNameExcel.AddShape(builder, shape);
    ScenarioCharacterNameExcel.AddNicknameJP(builder, nicknameJPOffset);
    ScenarioCharacterNameExcel.AddNameJP(builder, nameJPOffset);
    ScenarioCharacterNameExcel.AddNicknameKR(builder, nicknameKROffset);
    ScenarioCharacterNameExcel.AddNameKR(builder, nameKROffset);
    ScenarioCharacterNameExcel.AddProductionStep(builder, productionStep);
    ScenarioCharacterNameExcel.AddCharacterName(builder, characterName);
    return ScenarioCharacterNameExcel.EndScenarioCharacterNameExcel(builder);
  }

  public static void StartScenarioCharacterNameExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddCharacterName(FlatBufferBuilder builder, uint characterName) { builder.AddUint(0, characterName, 0); }
  public static void AddProductionStep(FlatBufferBuilder builder, Ivaldi.FlatBuffers.Common.ProductionStep productionStep) { builder.AddInt(1, (int)productionStep, 0); }
  public static void AddNameKR(FlatBufferBuilder builder, StringOffset nameKROffset) { builder.AddOffset(2, nameKROffset.Value, 0); }
  public static void AddNicknameKR(FlatBufferBuilder builder, StringOffset nicknameKROffset) { builder.AddOffset(3, nicknameKROffset.Value, 0); }
  public static void AddNameJP(FlatBufferBuilder builder, StringOffset nameJPOffset) { builder.AddOffset(4, nameJPOffset.Value, 0); }
  public static void AddNicknameJP(FlatBufferBuilder builder, StringOffset nicknameJPOffset) { builder.AddOffset(5, nicknameJPOffset.Value, 0); }
  public static void AddShape(FlatBufferBuilder builder, Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterShapes shape) { builder.AddInt(6, (int)shape, 0); }
  public static void AddSpinePrefabName(FlatBufferBuilder builder, StringOffset spinePrefabNameOffset) { builder.AddOffset(7, spinePrefabNameOffset.Value, 0); }
  public static void AddSmallPortrait(FlatBufferBuilder builder, StringOffset smallPortraitOffset) { builder.AddOffset(8, smallPortraitOffset.Value, 0); }
  public static Offset<Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterNameExcel> EndScenarioCharacterNameExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterNameExcel>(o);
  }
}


static public class ScenarioCharacterNameExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterName*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ProductionStep*/, 4 /*Ivaldi.FlatBuffers.Common.ProductionStep*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*NameKR*/, false)
      && verifier.VerifyString(tablePos, 10 /*NicknameKR*/, false)
      && verifier.VerifyString(tablePos, 12 /*NameJP*/, false)
      && verifier.VerifyString(tablePos, 14 /*NicknameJP*/, false)
      && verifier.VerifyField(tablePos, 16 /*Shape*/, 4 /*Ivaldi.FlatBuffers.ScenarioCharacterNameExcel.ScenarioCharacterShapes*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*SpinePrefabName*/, false)
      && verifier.VerifyString(tablePos, 20 /*SmallPortrait*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
